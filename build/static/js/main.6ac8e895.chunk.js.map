{"version":3,"sources":["Components/Signup.js","utils/index.js","Components/Login.js","Components/Sidebar.js","Components/UserDetails.js","Components/TokenTimer.js","Components/Dashboard.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.js","serviceWorker.js","index.js"],"names":["Signup","props","InputChangeHandler","e","state","target","name","value","setState","FormSubmitted","preventDefault","users","data","first_name","last_name","email","password","JSON","parse","push","requestOptions","method","headers","body","stringify","fetch","then","response","json","postId","id","catch","error","history","className","onSubmit","this","bind","type","placeholder","onChange","required","minLength","to","exact","activeClassName","React","Component","login","params","localStorage","setItem","logout","removeItem","isLogin","getItem","Login","inputChangehandler","VerifyLoginInfo","console","log","context","token","swal","isLoggedIn","items","onClick","Sidebar","UserDetails","names","getData","res","title","text","icon","buttons","dangerMode","willDelete","scope","map","item","index","key","delItem","Timer","time","seconds","timer","startTimer","countDown","secs","divisor_for_minutes","divisor_for_seconds","h","Math","floor","m","s","ceil","timeLeftVar","secondsToTime","setInterval","clearInterval","window","location","reload","Dashboard","path","component","PrivateRoute","rest","render","PublicRoute","restricted","App","createBrowserHistory","pathname","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ac8e895.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Signup.css\";\r\nimport swal from \"sweetalert\";\r\nimport { NavLink } from \"react-router-dom\";\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n  // For Input filed\r\n  InputChangeHandler = (e) => {\r\n    const state = this.state;\r\n    state[e.target.name] = e.target.value;\r\n    this.setState(state);\r\n  };\r\n  // For From Submission\r\n  FormSubmitted = (e) => {\r\n    e.preventDefault();\r\n    const { first_name, last_name, email, password } = this.state;\r\n    // Creating  localStorage for users\r\n    // let users = localStorage.getItem(\"users\");\r\n    let users = [];\r\n    if (!users) users = [];\r\n    users = JSON.parse(users);\r\n    const data = {\r\n      first_name,\r\n      last_name,\r\n      email: email,\r\n      password: password,\r\n    };\r\n    users.push(data);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(users),\r\n    };\r\n    fetch(\"https://reqres.in/api/users\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then(\r\n        (data) => this.setState({ postId: data.id })\r\n        // swal(\" Detail Submitted Successfully\")\r\n      )\r\n      .catch((error) => {});\r\n\r\n    // localStorage.setItem(\"users\", JSON.stringify(users));\r\n\r\n    this.setState({\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\" container-fluid signup\">\r\n        <form className=\"formSignup\" onSubmit={this.FormSubmitted.bind(this)}>\r\n          <h1>SignUp</h1>\r\n          <label className=\"label\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            placeholder=\"First name...\"\r\n            onChange={this.InputChangeHandler}\r\n            value={this.state.first_name}\r\n            required\r\n          ></input>\r\n          <label className=\"label\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            placeholder=\"Last name...\"\r\n            onChange={this.InputChangeHandler}\r\n            value={this.state.last_name}\r\n            required\r\n          ></input>\r\n          <label className=\"label\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email...\"\r\n            onChange={this.InputChangeHandler}\r\n            value={this.state.email}\r\n            required\r\n          ></input>\r\n          <label className=\"label\"> Password</label>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Password...\"\r\n            onChange={this.InputChangeHandler}\r\n            value={this.state.password}\r\n            minLength=\"8\"\r\n            required\r\n          ></input>\r\n          <button className=\"submit-btn\" type=\"submit\">\r\n            Sign up\r\n          </button>\r\n          <p>\r\n            <span>Already have an account ? </span>&nbsp;&nbsp;&nbsp;\r\n            <NavLink to=\"/\" exact={true} activeClassName=\"is-active\">\r\n              <strong className=\"strong\">LogIn</strong>\r\n            </NavLink>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Signup;\r\n","const TOKEN_KEY = \"jwt\";\r\n\r\nexport const login = (params) => {\r\n  localStorage.setItem(TOKEN_KEY, params);\r\n};\r\nexport const logout = () => {\r\n  localStorage.removeItem(TOKEN_KEY);\r\n};\r\n\r\nexport const isLogin = () => {\r\n  if (localStorage.getItem(TOKEN_KEY)) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const refreshToken = () => {\r\n  localStorage.getItem(\"jwt\");\r\n};\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport { login } from \"../utils\";\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      items: [],\r\n      isLoggedIn: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  inputChangehandler = (e) => {\r\n    const state = this.state;\r\n    state[e.target.name] = e.target.value;\r\n    this.setState(state);\r\n  };\r\n  VerifyLoginInfo = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Success:\", \"data\");\r\n    const { email, password } = this.state;\r\n    const data = { email: email, password: password };\r\n    this.props = data;\r\n    console.log(\"data\", data);\r\n    const context = this;\r\n\r\n    fetch(\"https://reqres.in/api/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        console.log(\"Success:\", json.token);\r\n        let params = json.token;\r\n        login(params);\r\n        swal(\"Successfully LoggedIn\");\r\n        context.setState({\r\n          isLoggedIn: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n  render() {\r\n    if (this.state.isLoggedIn) {\r\n      return <Redirect to=\"/Dashboard\" />;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\" container-fluid login\">\r\n          <form>\r\n            <h1>Log in</h1>\r\n            <label className=\"label\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={this.state.email}\r\n              placeholder=\"Email...\"\r\n              onChange={this.inputChangehandler}\r\n              required\r\n            ></input>\r\n            <label className=\"label\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={this.state.password}\r\n              placeholder=\"Password...\"\r\n              onChange={this.inputChangehandler}\r\n              required\r\n              minLength=\"8\"\r\n            ></input>\r\n            <button className=\"submit-btn1\" onClick={this.VerifyLoginInfo}>\r\n              Login\r\n            </button>\r\n            <p>\r\n              <span className=\"accountlabel\">Don't have an account ? </span>\r\n              &nbsp;&nbsp;&nbsp;\r\n              <NavLink to=\"/Signup\" exact={true} activeClassName=\"is-active\">\r\n                <strong className=\"strong\">SignUp</strong>\r\n              </NavLink>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport { logout } from \"../utils\";\r\nclass Sidebar extends React.Component {\r\n  logout = (e) => {\r\n    logout();\r\n    swal(\"Successfully Logout\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row sidebar\">\r\n          <div className=\"col-md-12 imageContainer1\">\r\n            <NavLink to=\"/Dashboard\" exact={true} activeClassName=\"is-active\">\r\n              <button className=\" btn btn-info commonButton\">Dashboard</button>\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 imageContainer1\">\r\n            <NavLink\r\n              to=\"/Dashboard/UserDetails\"\r\n              exact={true}\r\n              activeClassName=\"is-active\"\r\n            >\r\n              <button className=\" btn btn-info commonButton\">\r\n                User Details\r\n              </button>\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 imageContainer1 \">\r\n            <NavLink to=\"/\" exact={true} activeClassName=\"is-active\">\r\n              <button\r\n                className=\"btn btn-danger commonButton\"\r\n                onClick={this.logout}\r\n              >\r\n                Logout\r\n              </button>\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport swal from \"sweetalert\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport \"./UserDetails.css\";\r\nclass UserDetails extends React.Component {\r\n  state = {\r\n    names: [],\r\n  };\r\n  componentDidMount() {\r\n    this.getData();\r\n    fetch(\"https://reqres.in/api/users\")\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          names: json.data,\r\n        });\r\n      });\r\n  }\r\n  getData() {\r\n    fetch(\"https://reqres.in/api/users\")\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({\r\n          names: json.data,\r\n        });\r\n      });\r\n  }\r\n  delItem(id) {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this  data!\",\r\n      icon: \"warning\",\r\n      buttons: true,\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        fetch(\"https://reqres.in/api/users/\" + id, {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((json) => {\r\n            this.getData();\r\n          });\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid dashboardBackground\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 profileDashboard\">\r\n              <Sidebar />\r\n            </div>\r\n            <div className=\"col-md-9 quotes\">\r\n              <table className=\"table table-hover table-dark\">\r\n                <thead className=\"thead-dark\">\r\n                  <tr>\r\n                    <th scope=\"col\">Id</th>\r\n                    <th scope=\"col\">First Name</th>\r\n                    <th scope=\"col\">Last Name</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.names.map(\r\n                    (item, index) =>\r\n                      index < 8 && (\r\n                        <tr key={item.id}>\r\n                          <td>{item.id}</td>\r\n                          <td>{item.first_name}</td>\r\n                          <td>{item.last_name}</td>\r\n                          <td>{item.email}</td>\r\n                          <td>\r\n                            <button type=\"button\" className=\"btn btn-info\">\r\n                              EDIT\r\n                            </button>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"btn btn-danger button\"\r\n                              onClick={() => {\r\n                                this.delItem(item.id);\r\n                              }}\r\n                            >\r\n                              DELETE\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default UserDetails;\r\n","import React from \"react\";\r\nimport \"./Token.css\";\r\nimport { login, refreshToken } from \"../utils\";\r\nclass Timer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { time: {}, seconds: 600 };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n  secondsToTime(secs) {\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n  componentDidMount() {\r\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeftVar });\r\n    this.startTimer();\r\n  }\r\n  startTimer() {\r\n    if (this.timer === 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    let seconds = this.state.seconds - 1;\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n\r\n    if (seconds === 0) {\r\n      clearInterval(this.timer);\r\n      refreshToken();\r\n      window.location.reload(true);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h1 className=\"H1\"> Dashboard</h1>\r\n            <div className=\"line\"></div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12  token\">\r\n              <div className=\"card \">\r\n                <div className=\"card-body commonCard\">\r\n                  <h5 className=\"card-title\">\r\n                    <b>Token Remaining Time</b>\r\n                  </h5>\r\n                  <p className=\"card-text\">\r\n                    min: {this.state.time.m} sec: {this.state.time.s}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport { logout } from \"../utils\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nimport UserDetails from \"./UserDetails\";\r\nimport Timer from \"./TokenTimer\";\r\nclass Dashboard extends React.Component {\r\n  logout = (e) => {\r\n    logout();\r\n    swal(\"Successfully Logout\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid dashboardBackground\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 profileDashboard\">\r\n              <Sidebar />\r\n            </div>\r\n            <div className=\"col-md-9 quotes\">\r\n              <Timer />\r\n              <Switch>\r\n                <Route path=\"UserDetails\" component={UserDetails} />\r\n              </Switch>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { isLogin } from \"../utils\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    // Show the component only when the user is logged in\r\n    // Otherwise, redirect the user to  Login page\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        isLogin() ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { isLogin } from '../utils';\r\n\r\nconst PublicRoute = ({component: Component, restricted, ...rest}) => {\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            isLogin() && restricted ?\r\n                <Redirect to=\"/Dashboard\" />\r\n            : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React from \"react\";\r\nimport { Router, Route, Switch } from \"react-router\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Signup from \"./Components/Signup\";\r\nimport Login from \"./Components/Login\";\r\nimport Dashboard from \"./Components/Dashboard\";\r\nimport PrivateRoute from \"./Components/PrivateRoute\";\r\nimport PublicRoute from \"./Components/PublicRoute\";\r\nimport UserDetails from \"./Components/UserDetails\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const history = createBrowserHistory();\r\n    return (\r\n      <div className=\"App\">\r\n        <Router history={history}>\r\n          <Switch>\r\n            <PrivateRoute\r\n              path=\"/Dashboard/UserDetails\"\r\n              component={UserDetails}\r\n            />\r\n            <PublicRoute\r\n              restricted={true}\r\n              component={Signup}\r\n              path=\"/Signup\"\r\n              exact\r\n            />\r\n            <PublicRoute restricted={true} component={Login} path=\"/\" exact />\r\n            <PrivateRoute component={Dashboard} path=\"/Dashboard\" exact />\r\n            <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}